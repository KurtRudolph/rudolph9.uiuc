(**************************************************************************
 * You can add new test cases by adding new elements to the following lists
 * Format is:
 * TEST<X>ARG(<weight>, <function_name>, <arg1>, <arg2>, ..., <argX>)
 *
 * <X> is the number of argument that the function being tested takes.
 **************************************************************************)

(* This list is for regular problems *)
let rubric =
[
     TEST1ARG(1, reverse_fst_trd, (3, 1.0, "hi")) ; 
     TEST1ARG(1, square_dist, ((1.0, 2.0), (3.0, 4.0))) ;
     TEST2ARG(1, first_two_pairs, [1;2;3], [4;5;6;7]) ;
     TEST2ARG(1, first_two_pairs, [1], [5;7]) ;
     TEST1ARG(1, sum, [0; 2; 5]) ;
     TEST1ARG(1, collatz, 5) ;
     TEST1ARG(1, unzip, [(1,"hello"); (2,"world")]) ;
     TEST2ARG(1, dotproduct, [1;2], [3;4]) ;
     TEST2ARG(1, dotproduct, [1;3;21], [2;3]) ;
     TEST2ARG(1, dotproduct, [1;2], [1]) ;
     TEST2ARG(1, dotproduct, [], []) ;
     TEST2ARG(1, dotproduct, [3;3;5], []) ;
     TEST2ARG(1, dotproduct, [], [123;123;324]) ;
     TEST2ARG(1, partition, 2, [1;2;1;4;5;2;5;3;7;1;0]) ;
     TEST2ARG(1, partition, 0, []) ;
     TEST2ARG(1, partition, (-1), [0;2;3;2;3;4]) ;
     TEST2ARG(1, partition, 0, [0;0;0;0;0;4]) ;
     TEST2ARG(1, partition, 10, [(-1);0]) ;
     TEST2ARG(1, remove_all, (fun x -> x < 0), [1;-1;0;4;-2;5]) ;
     TEST2ARG(1, remove_all, (fun x -> x = 0), [0;0;0;0;0]) ;
     TEST2ARG(1, remove_all, (fun x -> x mod 2 = 0), [2;4;-2;3;5;6;-10]) ;
     TEST2ARG(1, mapidx, (fun i s -> (i,s)), ["hello"; "world"]) ;
]
(* Note: the last entry should not be followed by a semicolon. *)


(* This list is for extra credit problems *)
let extra_rubric = [
     TEST1ARG(1, group, [1;1;2;3;1;4;5;5;6]) ;
     TEST1ARG(1, group, [1;1;2;2;1;1]) ;
]

